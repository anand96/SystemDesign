class Solution {

    public boolean solve_dfs(Map<Integer, List<Integer>> adjList, int source, int destination, boolean[] visited) {
        if (source == destination)
            return true;

        if (visited[source])
            return false;

        visited[source] = true;

        for (int neighbor : adjList.get(source)) {
            if (solve_dfs(adjList, neighbor, destination, visited))
                return true;
        }
        return false;
    }

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        Map<Integer, List<Integer>> adjList = new HashMap<>();

        // Initialize adjacency list
        for (int i = 0; i < n; i++) {
            adjList.put(i, new ArrayList<>());
        }

        // Add edges to the adjacency list
        for (int[] edge : edges) {
            int from = edge[0], to = edge[1];
            adjList.get(from).add(to);
            adjList.get(to).add(from); // Because it's an undirected graph
        }

        boolean[] visited = new boolean[n];
        return solve_dfs(adjList, source, destination, visited);
    }
}