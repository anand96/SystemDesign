class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        List<List<Integer>> graph = new ArrayList<>();

        for(int i=0;i<=n;i++)
        {
            graph.add(new ArrayList<>());
        }

        for(int[] edge: dislikes)
        {
            graph.get(edge[0].add(edge[1]);
            graph.get(edge[1].add(edge[0]);
        }

        int[] colors = new int[n+1];
        for(int i =1;i<=n;i++)
        {
            if(colors[i]==0 && !dfs(graph,colors,i, 1)){
                return false;
            }
        }
        return true;
    }
    private boolean dfs(List<List<Integer>> graph, int[] colors, int node,int color)
    {
        colors[node] = color;

        for(int neighbour : graph.get(node))
        {
            if(colors[neighbor] == color) return false;
            if(colors[neighbor] ==0 && !dfs(graph, colors, neighbor, -color)) return false;
        }
        return true;
    }
}