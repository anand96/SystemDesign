class Dijkstra{
    static class Node implements Comparable<Node>{
        int vertex;
        int weight;
        Node(int v, int w)
        {
            vertex =v;
            weight =w;
        }
        public int compareTo(Node other){
            return Integer.compare(this.weight, other.weight);
        }
    }

    public static void dijkstra(int V, List<List<Node>> graph, int src)
    {
        PriorityQueue<Node> qp = new PriorityQueue<>();
        int [] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] =0;
        pq.add(new Node(src, 0));

        while(!pq.isEmpty()){
            Node node = pq.poll();
            int u = node.vertex;

            for(Node neighbor : graph.get(u)){
                int v = neighbor.vertex;
                int weight = neighbor.weight;

                if(dist[u] + weight < dist[v])
                {
                    dist[v] = dist[u] + weight;
                    pq.add(new Node(v, dist[v]));
                }
            }
        }
         System.out.println("Shortest distances from source " + src + ": " + Arrays.toString(dist));
    }

    public static void Dijkstra(int V, List<List<Node>> graph, int src)
    {
        PriorityQueue<Node> pq = new PriorityQueue<>();
        Set<Integer> visited = new HashSet<>();
        int [] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] =0;
        pq.add(new Node(src,0));

        while(!pq.isEmpty())
        {
            Node node = pq.poll();
            int  u = node.vertex;

            if(visited.contains(u))
            continue;
            visited.add(u);

            for(Node neighbor : graph.get(u))
            {
                int v = neighbor.vertex;
                int weight = neighbor.weight;

                if(!visited.contains(v) && dist[u] + weight < dist[v]){

                    dist[v] = dist[u] + weight;
                    pq.add(new Node(v, dist[v]));
                }
            }
        }
        `
    }
}