public static TopologicalSortBFS{
    public static List<Integer> topologicalSort(List<List<Integer>> adj, int vertices)
    {
        int[] inDegree = new int[vertices];
        Queue<Integer> que = new LinkedList<>();
        List<Integer> topOrder = new ArrayList<>();

        //Calculate inDegree for each vertex
        for(int i=0;i<vertices;i++)
        {
            for(int neighbor : adj.get(i))
            {
                inDegree[neighbour]++;
            }
        }

        //Add Nodes with 0 in-degree to queue
        for(int i=0;i<vertices;i++)
        {
            if(inDegree[i] ==0)
            {
                que.offer(i);
            }
        }

        //process the nodes
        while(!que.isEmpty())
        {
            int node = que.poll();
            topOrder.add(node);

            for(int neighbor : adj.get(node))
            {
                inDegree[neighbor]--;
                if(inDegree[neighbor]==0)
                {
                    que.offer(neighbor)
                }
            }
        }

        if(topOrder.size() != vertices)
                return false;

        return true;
    }
}