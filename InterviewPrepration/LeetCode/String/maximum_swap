import java.util.Arrays;

class Solution {
    public int maximumSwap(int num) {
        StringBuilder s = new StringBuilder(Integer.toString(num));
        int n = s.length();

        int[] maxRight = new int[10]; // Stores last occurrence of each digit (0-9)
        Arrays.fill(maxRight, -1);

        // Step 1: Store the rightmost occurrence of each digit
        for (int i = 0; i < n; i++) {
            maxRight[s.charAt(i) - '0'] = i;
        }

        // Step 2: Find the first smaller digit that can be swapped with a larger digit
        for (int i = 0; i < n; i++) {
            int currDigit = s.charAt(i) - '0';
            for (int digit = 9; digit > currDigit; digit--) { // Look for a larger digit
                if (maxRight[digit] > i) { // If a larger digit exists later
                    // Step 3: Swap
                    char temp = s.charAt(i);
                    s.setCharAt(i, s.charAt(maxRight[digit]));
                    s.setCharAt(maxRight[digit], temp);

                    // Step 4: Convert back to integer and return
                    return Integer.parseInt(s.toString());
                }
            }
        }

        return num; // If no swap was made, return original number
    }
}
