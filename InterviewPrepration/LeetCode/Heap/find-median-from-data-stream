class MedianFinder {

    private PriorityQueue<Integer> left_max_heap;
    private PriorityQueue<Integer> right_min_heap;

    public MedianFinder() {
        left_max_heap = new PriorityQueue<>((a , b) -> b-a );
        right_min_heap = new PriorityQueue<>();
    }

    public void addNum(int num) {
        if(left_max_heap.isEmpty() || num < left_max_heap.peek())
        {
            left_max_heap.offer(num);
        }
        else{
            right_min_heap.offer(num);
        }

        if(left_max_heap.size() - right_min_heap.size() > 1)
        {
            right_min_heap.offer(left_max_heap.peek());
            left_max_heap.poll();
        }
        else if(left_max_heap.size() < right_min_heap.size())
        {
            left_max_heap.push(right_max_heap.peek());
            right_min_heap.poll();
        }

    }

    public double findMedian() {

        if(low.size()>high.size())
        return low.peek();
        else
        return (low.peek() + high.peek()) /2.0;
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */