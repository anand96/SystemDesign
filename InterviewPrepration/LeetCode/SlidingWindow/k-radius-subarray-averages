import java.util.Arrays;

class Solution {
    public int[] getAverages(int[] nums, int k) {
        int l = nums.length;
        int[] arr = new int[l];
        Arrays.fill(arr, -1); // Initialize all values to -1

        if (2 * k + 1 > l) {
            return arr; // If window size is larger than array, return all -1s
        }

        long sum = 0; // Use long to prevent integer overflow
        int windowSize = 2 * k + 1;

        // Compute the sum for the first window
        for (int i = 0; i < windowSize; i++) {
            sum += nums[i];
        }
        arr[k] = (int) (sum / windowSize); // First valid window

        // Sliding window: iterate from k+1 to l-k-1
        for (int i = windowSize; i < l; i++) {
            sum += nums[i]; // Add new element to window
            sum -= nums[i - windowSize]; // Remove the oldest element from window
            arr[i - k] = (int) (sum / windowSize); // Store result at the correct index
        }

        return arr;
    }
}
