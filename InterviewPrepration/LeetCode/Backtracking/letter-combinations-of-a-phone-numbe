class Solution {
    // Mapping of digits to letters.
    private static final String[] KEYPAD = {
        "",     // 0
        "",     // 1
        "abc",  // 2
        "def",  // 3
        "ghi",  // 4
        "jkl",  // 5
        "mno",  // 6
        "pqrs", // 7
        "tuv",  // 8
        "wxyz"  // 9
    };

    public List<String> letterCombinations(String digits) {
        // Result list to store combinations.
        List<String> result = new ArrayList<>();
        if (digits == null || digits.isEmpty()) {
            return result; // Return empty list if input is empty.
        }
        // Start backtracking from the first digit.
        backtrack(digits, 0, new StringBuilder(), result);
        return result;
    }

    private void backtrack(String digits, int index, StringBuilder current, List<String> result) {
        // Base case: If we reach the length of the digits, add the combination to the result.
        if (index == digits.length()) {
            result.add(current.toString());
            return;
        }

        // Get the letters corresponding to the current digit.
        String letters = KEYPAD[digits.charAt(index) - '0'];
        for (char c : letters.toCharArray()) {
            // Add the character to the current combination.
            current.append(c);
            // Recurse to the next digit.
            backtrack(digits, index + 1, current, result);
            // Backtrack by removing the last character.
            current.deleteCharAt(current.length() - 1);
        }
    }
}
