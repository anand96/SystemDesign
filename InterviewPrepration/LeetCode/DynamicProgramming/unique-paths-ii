class Solution {


    // Recurssive approch gives us TLE 31 out of 40 testcases passed.
    // public int countPath(int [][] obstacleGrid,int m,int n,int i,int j)
    // {
    //     if(i>=m || j>=n || obstacleGrid[i][j] == 1)
    //     return 0;

    //     if(i==m-1 && j== n-1)
    //     return 1;

    //     return countPath(obstacleGrid,m,n,i,j+1) + countPath(obstacleGrid,m,n,i+1,j);
    // }
    // public int uniquePathsWithObstacles(int[][] obstacleGrid) {
    //     int m = obstacleGrid.length;
    //     int n = obstacleGrid[0].length;
    //     return countPath(obstacleGrid,m,n,0,0);
    // }

    // Memoization
    public int countPath(int obstacleGrid[][],int m,int n, int i,int j,int dp[][])
    {
        if(i>=m || j>=n || obstacleGrid[i][j]==1)
            return 0;

        if(i==m-1 && j == n-1)
            return 1;

        if(dp[i][j]!=-1)
            return dp[i][j];

        dp[i][j]  = countPath(obstacleGrid,m,n,i+1,j,dp) + countPath(obstacleGrid,m,n,i,j+1,dp);
        return dp[i][j];
    }


    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                dp[i][j]=-1;
            }
        }
        return countPath(obstacleGrid,m,n,0,0,dp);
    }

}