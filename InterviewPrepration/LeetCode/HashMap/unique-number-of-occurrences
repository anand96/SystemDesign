xample 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:

Input: arr = [1,2]
Output: false
Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true


Constraints:

1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000

//Approch1
// class Solution {
//     public boolean uniqueOccurrences(int[] arr) {
//         HashMap<Integer, Integer> mp = new HashMap<>();

//         for(int a : arr)
//         {
//             mp.put(a, mp.getOrDefault(a,0)+ 1);
//         }
//         HashSet<Integer> set = new HashSet<>();

//         for(Map.Entry<Integer, Integer> entry : mp.entrySet())
//         {
//             int freq = entry.getValue();
//             if(set.contains(freq))
//             return false;

//             set.add(freq);
//         }
//         return true;

//     }
// }

class Solution{
    public boolean uniqueOccurrences(int[] arr)
    {
        int[] range = new int[2001];

        for(int i=0;i<arr.length;i++)
        {
            range[arr[i]+1000]++;
        }
        Arrays.sort(range);

        for(int i=1;i<2001;i++)
        {
            if(range[i]!=0&&range[i]==range[i-1])
            return false;
        }
        return true;
    }
}