Example 1:

Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
Output: [[1,2,10],[4,5,7,8]]
Explanation:
Players 1, 2, and 10 have not lost any matches.
Players 4, 5, 7, and 8 each have lost one match.
Players 3, 6, and 9 each have lost two matches.
Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].
Example 2:

Input: matches = [[2,3],[1,3],[5,4],[6,4]]
Output: [[1,2,5,6],[]]
Explanation:
Players 1, 2, 5, and 6 have not lost any matches.
Players 3 and 4 each have lost two matches.
Thus, answer[0] = [1,2,5,6] and answer[1] = [].


Constraints:

1 <= matches.length <= 105
matches[i].length == 2
1 <= winneri, loseri <= 105
winneri != loseri
All matches[i] are unique.






class Solution
{
    public List<List<Integer>> findWinners(int[][] matches)
    {
        int n = matches.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        TreeSet<Integer> never_lost = new TreeSet<>();
        TreeSet<Integer> only_one_lost = new TreeSet<>();
        List<List<Integer>> result = new ArrayList<>();

        for(int i=0;i<n;i++)
        {
            map.put(matches[i][1], map.getOrDefault(matches[i][1], 0) + 1);
        }

        for(int i=0;i<n;i++)
        {
            if(!map.containsKey(matches[i][0]))
            {
                never_lost.add(matches[i][0]);
            }
        }
        for(Map.Entry<Integer, Integer> entry : map.entrySet())
        {
            if(entry.getValue()==1)
            {
                only_one_lost.add(entry.getKey());
            }
        }
        result.add(new ArrayList<>(never_lost));
        result.add(new ArrayList<>(only_one_lost));

        return result;
    }
}


//on my own